{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["Node","node","children","to","frontmatter","id","title","map","child","pageQuery","IndexPage","trees","entries","childrens","Map","forEach","get","parent","push","dfs","f","bind","fix","filter","generateTrees","data","edges","console","log","className"],"mappings":"2PAQMA,EAAO,SAAPA,EAAQ,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,SAAR,OACX,4BACE,kBAAC,OAAD,CAAMC,GAAI,UAAYF,EAAKG,YAAYC,IACpCJ,EAAKG,YAAYE,OAEnBJ,GACC,4BACGA,EAASK,KAAI,SAACC,GAAD,OACZ,kBAACR,EAAD,CAAMC,KAAMO,EAAMP,KAAMC,SAAUM,EAAMN,iBAiDrCO,EAAS,aAiBPC,UAnCG,SAAC,GAAc,IAEzBC,EAxBc,SAACC,GACrB,IAAMC,EAAY,IAAIC,IACpBF,EAAQL,KAAI,SAACN,GAAD,MAAU,CAACA,EAAKG,YAAYC,GAAI,QAE9CO,EACGG,SAAQ,SAACd,IACKY,EAAUG,IAAIf,EAAKG,YAAYa,SAAW,IAClDC,KAAKjB,MAGd,IAAMkB,EAZI,SAACC,GAAD,OAAOA,EAAEC,KAAK,KAAMD,GAYlBE,EAAI,SAACF,EAAGnB,GAAJ,MAAc,CAC5BA,OACAC,SAAUW,EAAUG,IAAIf,EAAKG,YAAYC,IAAIE,KAAI,SAACC,GAAD,OAAWY,EAAEA,EAAGZ,UAOnE,OAJcI,EACXW,QAAO,SAACtB,GAAD,OAAWA,EAAKG,YAAYa,UACnCV,KAAI,SAACN,GAAD,OAAUkB,EAAIlB,MAOPuB,CAFgB,EAAXC,KACEb,QAAQc,MAAMnB,KAAI,qBAAEN,SAIzC,OAFA0B,QAAQC,IAAIjB,GAGV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKL,MAAM,SACX,yBAAKuB,UAAU,WACb,4CACA,4BACGlB,EAAMJ,KAAI,gBAAEN,EAAF,EAAEA,KAAMC,EAAR,EAAQA,SAAR,OAAsB,kBAACF,EAAD,CAAMC,KAAMA,EAAMC,SAAUA","file":"component---src-pages-index-js-cbc29cb3c2365d9fa688.js","sourcesContent":["import React from \"react\";\r\nimport { Link, graphql } from \"gatsby\";\r\n\r\nimport Layout from \"../components/layout\";\r\nimport SEO from \"../components/seo\";\r\n\r\n// { node: <Node>, children: <Children> }\r\n\r\nconst Node = ({node, children}) => (\r\n  <li>\r\n    <Link to={\"/entry/\" + node.frontmatter.id}>\r\n      {node.frontmatter.title}\r\n    </Link>\r\n    {children && (\r\n      <ul>\r\n        {children.map((child) => (\r\n          <Node node={child.node} children={child.children} />\r\n        ))}\r\n      </ul>\r\n    )}\r\n  </li>\r\n);\r\n\r\nconst fix = (f) => f.bind(null, f);\r\n\r\nconst generateTrees = (entries) => {\r\n  const childrens = new Map(\r\n    entries.map((node) => [node.frontmatter.id, []]));\r\n\r\n  entries\r\n    .forEach((node) => {\r\n      const list = childrens.get(node.frontmatter.parent) || [];\r\n      list.push(node);\r\n    });\r\n\r\n  const dfs = fix((f, node) => ({\r\n    node,\r\n    children: childrens.get(node.frontmatter.id).map((child) => f(f, child)),\r\n  }));\r\n\r\n  const trees = entries\r\n    .filter((node) => !node.frontmatter.parent)\r\n    .map((node) => dfs(node));\r\n\r\n  return trees;\r\n};\r\n\r\nconst IndexPage = ({ data }) => {\r\n  const entries = data.entries.edges.map(({node}) => node);\r\n  const trees = generateTrees(entries);\r\n  console.log(trees);\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"Home\" />\r\n      <div className=\"content\">\r\n        <h1>Entries List</h1>\r\n        <ul>\r\n          {trees.map(({node, children}) => <Node node={node} children={children} />)}\r\n        </ul>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    entries: allMarkdownRemark {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            title_short\r\n            id\r\n            parent\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default IndexPage;\r\n"],"sourceRoot":""}