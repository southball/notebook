{"version":3,"sources":["webpack:///./src/templates/entry-template.js"],"names":["Template","pageContext","data","entry","frontmatter","html","parent","parentEntry","breadcrumbPath","console","log","title","className","map","id","title_short","to","relatedEntries","edges","length","node","key","siblingEntries","childrenEntries","dangerouslySetInnerHTML","__html","pageQuery"],"mappings":"2FAAA,gKAOe,SAASA,EAAT,GAA0C,IAAtBC,EAAqB,EAArBA,YAAaC,EAAQ,EAARA,KAAQ,EACxBA,EAAKC,MAA3BC,EAD8C,EAC9CA,YAAaC,EADiC,EACjCA,KACfC,EAASJ,EAAKK,YACZC,EAAmBP,EAAnBO,eAIR,OAFAC,QAAQC,IAAIF,GAGV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKG,MAAOP,EAAYO,QACxB,yBAAKC,UAAU,cACb,4BACGJ,EAAeK,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,YAAN,OAClB,4BAAI,kBAAC,OAAD,CAAMC,GAAI,UAAYF,GAAKC,SAIrC,yBAAKH,UAAU,mBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,8CACb,2BAAOA,UAAU,UAEXN,GACF,oCACE,uBAAGM,UAAU,cAAb,gBACA,wBAAIA,UAAU,aACZ,4BACE,kBAAC,OAAD,CAAMI,GAAI,UAAYV,EAAOF,YAAYU,IAAKR,EAAOF,YAAYO,UAMvET,EAAKe,eAAeC,MAAMC,OAAS,GACnC,oCACE,uBAAGP,UAAU,cAAb,mBAGA,wBAAIA,UAAU,aACXV,EAAKe,eAAeC,MAAML,KAAI,gBAAWT,EAAX,EAAGgB,KAAQhB,YAAX,OAC7B,wBAAIiB,IAAKjB,EAAYU,IACnB,kBAAC,OAAD,CAAME,GAAI,UAAYZ,EAAYU,IAAKV,EAAYO,eAOzDL,GAAUJ,EAAKoB,eAAeJ,MAAMC,OAAS,GAC/C,oCACE,uBAAGP,UAAU,cAAb,mBAGA,wBAAIA,UAAU,aACXV,EAAKoB,eAAeJ,MAAML,KAAI,gBAAWT,EAAX,EAAGgB,KAAQhB,YAAX,OAC7B,wBAAIiB,IAAKjB,EAAYU,IACnB,kBAAC,OAAD,CAAME,GAAI,UAAYZ,EAAYU,IAAKV,EAAYO,aAO3DT,EAAKqB,gBAAgBL,MAAMC,OAAS,GACpC,oCACE,uBAAGP,UAAU,cAAb,oBACA,wBAAIA,UAAU,aACXV,EAAKqB,gBAAgBL,MAAML,KAAI,gBAAWT,EAAX,EAAGgB,KAAQhB,YAAX,OAC9B,wBAAIiB,IAAKjB,EAAYU,IACnB,kBAAC,OAAD,CAAME,GAAI,UAAYZ,EAAYU,IAAKV,EAAYO,eAQjE,yBAAKC,UAAU,6BACb,4BAAKR,EAAYO,OACjB,yBACEC,UAAU,wBACVY,wBAAyB,CAAEC,OAAQpB,UAU5C,IAAMqB,EAAS","file":"component---src-templates-entry-template-js-78bcf529c84afe863fb3.js","sourcesContent":["import React, { useState } from \"react\";\nimport { graphql, Link } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\n\nimport 'katex/dist/katex.min.css';\n\nexport default function Template({ pageContext, data }) {\n  const { frontmatter, html } = data.entry;\n  const parent = data.parentEntry;\n  const { breadcrumbPath } = pageContext;\n\n  console.log(breadcrumbPath);\n\n  return (\n    <Layout>\n      <SEO title={frontmatter.title} />\n      <nav className=\"breadcrumb\">\n        <ul>\n          {breadcrumbPath.map(({id, title_short}) => (\n            <li><Link to={\"/entry/\" + id}>{title_short}</Link></li>\n          ))}\n        </ul>\n      </nav>\n      <div className=\"entry-container\">\n        <div className=\"entry\">\n          <div className=\"columns is-multiline\">\n            <div className=\"column is-full-tablet is-one-third-desktop\">\n              <aside className=\"menu\">\n                {\n                  !!parent &&\n                  <>\n                    <p className=\"menu-label\">Parent entry</p>\n                    <ul className=\"menu-list\">\n                      <li>\n                        <Link to={\"/entry/\" + parent.frontmatter.id}>{parent.frontmatter.title}</Link>\n                      </li>\n                    </ul>\n                  </>\n                }\n                {\n                  data.relatedEntries.edges.length > 0 &&\n                  <>\n                    <p className=\"menu-label\">\n                      Related Entries\n                    </p>\n                    <ul className=\"menu-list\">\n                      {data.relatedEntries.edges.map(({ node: { frontmatter } }) => (\n                        <li key={frontmatter.id}>\n                          <Link to={\"/entry/\" + frontmatter.id}>{frontmatter.title}</Link>\n                        </li>\n                      ))}\n                    </ul>\n                  </>\n                }\n                {\n                  !!parent && data.siblingEntries.edges.length > 0 &&\n                  <>\n                    <p className=\"menu-label\">\n                      Sibling Entries\n                    </p>\n                    <ul className=\"menu-list\">\n                      {data.siblingEntries.edges.map(({ node: { frontmatter } }) => (\n                        <li key={frontmatter.id}>\n                          <Link to={\"/entry/\" + frontmatter.id}>{frontmatter.title}</Link>\n                        </li>\n                      ))}\n                    </ul>\n                  </>\n                }\n                {\n                  data.childrenEntries.edges.length > 0 &&\n                  <>\n                    <p className=\"menu-label\">Children Entries</p>\n                    <ul className=\"menu-list\">\n                      {data.childrenEntries.edges.map(({ node: { frontmatter } }) => (\n                        <li key={frontmatter.id}>\n                          <Link to={\"/entry/\" + frontmatter.id}>{frontmatter.title}</Link>\n                        </li>\n                      ))}\n                    </ul>\n                  </>\n                }\n              </aside>\n            </div>\n            <div className=\"column entry-body content\">\n              <h1>{frontmatter.title}</h1>\n              <div\n                className=\"entry-content content\"\n                dangerouslySetInnerHTML={{ __html: html }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query($id: String!, $parentId: String, $related: [String]) {\n    entry: markdownRemark(frontmatter: { id: { eq: $id } }) {\n      html\n      frontmatter {\n        title\n        related\n      }\n    }\n    \n    childrenEntries: allMarkdownRemark(filter: {frontmatter: {parent: {eq: $id}}}) {\n      edges {\n        node {\n          frontmatter {\n            title\n            id\n          }\n        }\n      }\n    }\n    \n    relatedEntries: allMarkdownRemark(filter: {frontmatter: {id: {in: $related}}}) {\n      edges {\n        node {\n          frontmatter {\n            title\n            id\n          }\n        }\n      }\n    }\n    \n    siblingEntries: allMarkdownRemark(filter: {frontmatter: {parent: {eq: $parentId}, id: {ne: $id}}}) {\n      edges {\n        node {\n          frontmatter {\n            title\n            id\n          }\n        }\n      }\n    }\n    \n    parentEntry: markdownRemark(frontmatter: { id: { eq: $parentId } }) {\n      html\n      frontmatter {\n        id\n        title\n      }\n    }\n  }\n`;"],"sourceRoot":""}