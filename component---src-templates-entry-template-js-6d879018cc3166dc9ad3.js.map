{"version":3,"sources":["webpack:///./src/templates/entry-template.js"],"names":["Template","pageContext","data","entry","frontmatter","html","parent","parentEntry","breadcrumbPath","entrySorter","entry1","entry2","title","console","log","className","style","padding","map","id","title_short","to","dangerouslySetInnerHTML","__html","relatedEntries","edges","length","node","sort","key","siblingEntries","childrenEntries","pageQuery"],"mappings":"+QAQe,SAASA,EAAT,GAA0C,IAAtBC,EAAqB,EAArBA,YAAaC,EAAQ,EAARA,KAAQ,EACxBA,EAAKC,MAA3BC,EAD8C,EAC9CA,YAAaC,EADiC,EACjCA,KACfC,EAASJ,EAAKK,YACZC,EAAmBP,EAAnBO,eAEFC,EAAc,SAACC,EAAQC,GAAT,QAAsBD,EAAON,YAAYQ,MAAQD,EAAOP,YAAYQ,QAIxF,OAFAC,QAAQC,IAAIN,GAGV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKI,MAAOR,EAAYQ,QACxB,6BAASG,UAAU,WACjB,yBAAKA,UAAU,eAAeC,MAAO,CAACC,QAAS,gBAC7C,yBAAKF,UAAU,cACb,4BACGP,EAAeU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,YAAP,OAClB,4BAAI,kBAAC,OAAD,CAAMC,GAAI,UAAYF,GAAKC,WAMzC,yBAAKL,UAAU,mBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,0CACb,yBAAKA,UAAU,6BACb,4BAAKX,EAAYQ,OACjB,yBACEG,UAAU,wBACVO,wBAAyB,CAAEC,OAAQlB,MAGvC,yBAAKU,UAAU,8CACb,2BAAOA,UAAU,UAEXT,GACF,oCACE,uBAAGS,UAAU,cAAb,gBACA,wBAAIA,UAAU,aACZ,4BACE,kBAAC,OAAD,CAAMM,GAAI,UAAYf,EAAOF,YAAYe,IAAKb,EAAOF,YAAYQ,UAMvEV,EAAKsB,eAAeC,MAAMC,OAAS,GACnC,oCACE,uBAAGX,UAAU,cAAb,mBAGA,wBAAIA,UAAU,aACXb,EAAKsB,eAAeC,MAClBP,KAAI,qBAAGS,QACPC,KAAKnB,GACLS,KAAI,gBAAGd,EAAH,EAAGA,YAAH,OACH,wBAAIyB,IAAKzB,EAAYe,IACnB,kBAAC,OAAD,CAAME,GAAI,UAAYjB,EAAYe,IAAKf,EAAYQ,eAO3DN,GAAUJ,EAAK4B,eAAeL,MAAMC,OAAS,GAC/C,oCACE,uBAAGX,UAAU,cAAb,mBAGA,wBAAIA,UAAU,aACXb,EAAK4B,eAAeL,MAClBP,KAAI,qBAAGS,QACPC,KAAKnB,GACLS,KAAI,gBAAGd,EAAH,EAAGA,YAAH,OACH,wBAAIyB,IAAKzB,EAAYe,IACnB,kBAAC,OAAD,CAAME,GAAI,UAAYjB,EAAYe,IAAKf,EAAYQ,aAO7DV,EAAK6B,gBAAgBN,MAAMC,OAAS,GACpC,oCACE,uBAAGX,UAAU,cAAb,oBACA,wBAAIA,UAAU,aACXb,EAAK6B,gBAAgBN,MACnBP,KAAI,qBAAGS,QACPC,KAAKnB,GACLS,KAAI,gBAAGd,EAAH,EAAGA,YAAH,OACH,wBAAIyB,IAAKzB,EAAYe,IACnB,kBAAC,OAAD,CAAME,GAAI,UAAYjB,EAAYe,IAAKf,EAAYQ,mBAexE,IAAMoB,EAAS","file":"component---src-templates-entry-template-js-6d879018cc3166dc9ad3.js","sourcesContent":["import React from \"react\";\nimport { graphql, Link } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\n\nimport \"./entry-template.scss\";\nimport \"katex/dist/katex.min.css\";\n\nexport default function Template({ pageContext, data }) {\n  const { frontmatter, html } = data.entry;\n  const parent = data.parentEntry;\n  const { breadcrumbPath } = pageContext;\n\n  const entrySorter = (entry1, entry2) => +(entry1.frontmatter.title > entry2.frontmatter.title);\n\n  console.log(breadcrumbPath);\n\n  return (\n    <Layout>\n      <SEO title={frontmatter.title} />\n      <article className=\"message\">\n        <div className=\"message-body\" style={{padding: \"0.5em 1.5em\"}}>\n          <nav className=\"breadcrumb\">\n            <ul>\n              {breadcrumbPath.map(({ id, title_short }) => (\n                <li><Link to={\"/entry/\" + id}>{title_short}</Link></li>\n              ))}\n            </ul>\n          </nav>\n        </div>\n      </article>\n      <div className=\"entry-container\">\n        <div className=\"entry\">\n          <div className=\"columns is-multiline reverse-row-order\">\n            <div className=\"column entry-body content\">\n              <h1>{frontmatter.title}</h1>\n              <div\n                className=\"entry-content content\"\n                dangerouslySetInnerHTML={{ __html: html }}\n              />\n            </div>\n            <div className=\"column is-full-tablet is-one-third-desktop\">\n              <aside className=\"menu\">\n                {\n                  !!parent &&\n                  <>\n                    <p className=\"menu-label\">Parent entry</p>\n                    <ul className=\"menu-list\">\n                      <li>\n                        <Link to={\"/entry/\" + parent.frontmatter.id}>{parent.frontmatter.title}</Link>\n                      </li>\n                    </ul>\n                  </>\n                }\n                {\n                  data.relatedEntries.edges.length > 0 &&\n                  <>\n                    <p className=\"menu-label\">\n                      Related Entries\n                    </p>\n                    <ul className=\"menu-list\">\n                      {data.relatedEntries.edges\n                        .map(({ node }) => node)\n                        .sort(entrySorter)\n                        .map(({ frontmatter }) => (\n                          <li key={frontmatter.id}>\n                            <Link to={\"/entry/\" + frontmatter.id}>{frontmatter.title}</Link>\n                          </li>\n                        ))}\n                    </ul>\n                  </>\n                }\n                {\n                  !!parent && data.siblingEntries.edges.length > 0 &&\n                  <>\n                    <p className=\"menu-label\">\n                      Sibling Entries\n                    </p>\n                    <ul className=\"menu-list\">\n                      {data.siblingEntries.edges\n                        .map(({ node }) => node)\n                        .sort(entrySorter)\n                        .map(({ frontmatter }) => (\n                          <li key={frontmatter.id}>\n                            <Link to={\"/entry/\" + frontmatter.id}>{frontmatter.title}</Link>\n                          </li>\n                        ))}\n                    </ul>\n                  </>\n                }\n                {\n                  data.childrenEntries.edges.length > 0 &&\n                  <>\n                    <p className=\"menu-label\">Children Entries</p>\n                    <ul className=\"menu-list\">\n                      {data.childrenEntries.edges\n                        .map(({ node }) => node)\n                        .sort(entrySorter)\n                        .map(({ frontmatter }) => (\n                          <li key={frontmatter.id}>\n                            <Link to={\"/entry/\" + frontmatter.id}>{frontmatter.title}</Link>\n                          </li>\n                        ))}\n                    </ul>\n                  </>\n                }\n              </aside>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query($id: String!, $parentId: String, $related: [String]) {\n    entry: markdownRemark(frontmatter: { id: { eq: $id } }) {\n      html\n      frontmatter {\n        title\n        related\n      }\n    }\n    \n    childrenEntries: allMarkdownRemark(filter: {frontmatter: {parent: {eq: $id}}}) {\n      edges {\n        node {\n          frontmatter {\n            title\n            id\n          }\n        }\n      }\n    }\n    \n    relatedEntries: allMarkdownRemark(filter: {frontmatter: {id: {in: $related}}}) {\n      edges {\n        node {\n          frontmatter {\n            title\n            id\n          }\n        }\n      }\n    }\n    \n    siblingEntries: allMarkdownRemark(filter: {frontmatter: {parent: {eq: $parentId}, id: {ne: $id}}}) {\n      edges {\n        node {\n          frontmatter {\n            title\n            id\n          }\n        }\n      }\n    }\n    \n    parentEntry: markdownRemark(frontmatter: { id: { eq: $parentId } }) {\n      html\n      frontmatter {\n        id\n        title\n      }\n    }\n  }\n`;"],"sourceRoot":""}